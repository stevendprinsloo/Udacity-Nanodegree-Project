{"remainingRequest":"/home/steven/workspace/casting-agency-frontend/node_modules/babel-loader/lib/index.js!/home/steven/workspace/casting-agency-frontend/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/steven/workspace/casting-agency-frontend/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/steven/workspace/casting-agency-frontend/src/components/actors/ActorList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/steven/workspace/casting-agency-frontend/src/components/actors/ActorList.vue","mtime":1652734037048},{"path":"/home/steven/workspace/casting-agency-frontend/babel.config.js","mtime":1652640712513},{"path":"/home/steven/workspace/casting-agency-frontend/node_modules/@vue/cli-plugin-babel/node_modules/cache-loader/dist/cjs.js","mtime":1618407608009},{"path":"/home/steven/workspace/casting-agency-frontend/node_modules/babel-loader/lib/index.js","mtime":1650889791270},{"path":"/home/steven/workspace/casting-agency-frontend/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":1618407608009},{"path":"/home/steven/workspace/casting-agency-frontend/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1634219578329}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3N0ZXZlbi93b3Jrc3BhY2UvY2FzdGluZy1hZ2VuY3ktZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgQXBpU2VydmljZSB9IGZyb20gIkAvYXBpIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJNb3ZpZUxpc3QiLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBhY3RvckRhdGE6IG51bGwsCiAgICAgIGlzTG9hZGluZzogdHJ1ZSwKICAgICAgZXJyb3I6IG51bGwsCiAgICAgIHNhdmluZzogZmFsc2UKICAgIH07CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5sb2FkQWN0b3JzKCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBsb2FkQWN0b3JzOiBmdW5jdGlvbiBsb2FkQWN0b3JzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgcmVzcG9uc2U7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX3RoaXMuaXNMb2FkaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIEFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3RvcnMoKS5nZXRBbGwoMSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2VzcykgewogICAgICAgICAgICAgICAgICBfdGhpcy5hY3RvckRhdGEgPSByZXNwb25zZS5kYXRhOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgX3RoaXMuZXJyb3IgPSAiRmFpbGVkIHRvIGxvYWQgYWN0b3JzIjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfQogIH0KfTs="},{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;AAEA;EACAA,iBADA;EAEAC,IAFA,kBAEA;IACA;MACAC,eADA;MAEAC,eAFA;MAGAC,WAHA;MAIAC;IAJA;EAMA,CATA;EAUAC,OAVA,qBAUA;IACA;EACA,CAZA;EAaAC;IACAC,UADA,wBACA;MAAA;;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACA;gBADA;gBAAA,OAEAC,2CAFA;;cAAA;gBAEAC,QAFA;;gBAGA;kBACA;gBACA,CAFA,MAEA;kBACA;gBACA;;gBACA;;cARA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IASA;EAVA;AAbA","names":["name","data","actorData","isLoading","error","saving","created","methods","loadActors","ApiService","response"],"sourceRoot":"src/components/actors","sources":["ActorList.vue"],"sourcesContent":["<template>\n  <div class=\"\">\n    <div class=\"d-flex align-items-center py-4 border-bottom\">\n      <h3 class=\"mb-0 me-4\">Actors</h3>\n      <router-link\n        tag=\"button\"\n        :to=\"{ name: 'app_actors_new' }\"\n        class=\"btn btn-primary ms-auto\"\n      >\n        <i class=\"bi bi-plus-circle me-1\"></i>\n        <span>Add Actor</span>\n      </router-link>\n    </div>\n\n    <div class=\"mt-2\">\n      <template v-if=\"isLoading\">\n        <p>Loading...</p>\n      </template>\n      <template v-else-if=\"error\">\n        <p>{{ error }}</p>\n      </template>\n      <template v-else-if=\"!actorData\">\n        There are currently no actors in the system\n      </template>\n      <template v-else>\n        <pre>\n          {{ actorData }}\n        </pre>\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Age</th>\n              <th scope=\"col\">Gender</th>\n              <th scope=\"col\">Movies</th>\n            </tr>\n          </thead>\n          <tbody>\n            <template v-for=\"actor in actorData\">\n              <tr :key=\"actor.id\">\n                <th scope=\"row\"><i class=\"bi bi-person\"></i></th>\n                <td>{{ actor.name }}</td>\n                <td>{{ actor.age }}</td>\n                <td>\n                  <span class=\"badge bg-lighter-grey text-grey\">{{\n                    actor.gender.split(\"\")[0].toUpperCase()\n                  }}</span>\n                </td>\n                <td>{{ actor.movies }}</td>\n              </tr>\n            </template>\n          </tbody>\n        </table>\n      </template>\n    </div>\n  </div>\n</template>\n<script>\nimport { ApiService } from \"@/api\";\n\nexport default {\n  name: \"MovieList\",\n  data() {\n    return {\n      actorData: null,\n      isLoading: true,\n      error: null,\n      saving: false,\n    };\n  },\n  created() {\n    this.loadActors();\n  },\n  methods: {\n    async loadActors() {\n      this.isLoading = true;\n      const response = await ApiService.getInstance().actors().getAll(1);\n      if (response.success) {\n        this.actorData = response.data;\n      } else {\n        this.error = \"Failed to load actors\";\n      }\n      this.isLoading = false;\n    },\n  },\n};\n</script>\n"]}]}